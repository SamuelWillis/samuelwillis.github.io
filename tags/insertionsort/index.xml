<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>InsertionSort on samuel willis</title><link>https://www.samuelwillis.dev/tags/insertionsort/</link><description>Recent content in InsertionSort on samuel willis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Apr 2021 12:59:20 -0600</lastBuildDate><atom:link href="https://www.samuelwillis.dev/tags/insertionsort/index.xml" rel="self" type="application/rss+xml"/><item><title>Insertion Sort in Elixir</title><link>https://www.samuelwillis.dev/posts/insertion-sort-in-elixir/</link><pubDate>Sat, 24 Apr 2021 12:59:20 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/insertion-sort-in-elixir/</guid><description>Departing from Data Structures such as Queues and Stacks this post will cover the insertion sort algorithm in Elixir.
Insertion sort is one of the first sorting algorithms introduced in Computer Science as its quite simple.
Insertion sort is quite efficient on small data sets and it does the sort in place. Meaning it has O(1) (constant) memory space requirements. Unfortunately, this does not hold true in Elixir as recursion is used causing the space-complexity to be O(n) (linear).</description></item></channel></rss>