<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>samuel willis</title><link>https://www.samuelwillis.dev/</link><description>Recent content on samuel willis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Apr 2021 18:36:07 -0600</lastBuildDate><atom:link href="https://www.samuelwillis.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Queues in Elixir</title><link>https://www.samuelwillis.dev/posts/queues-in-elixir/</link><pubDate>Tue, 13 Apr 2021 18:36:07 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/queues-in-elixir/</guid><description>Continuing on from my previous Stacks in Elixir post today I will cover implementing Queues in Elixir.
Queues operate on a First In First out (FIFO) policy, meaning the first item placed onto the queue is the first to be removed.
These are again essentially sugar for lists but there&amp;rsquo;s a few gotchas to get around when implementing them in Elixir. The main being that appending to lists can be an expensive operation in Elixir.</description></item><item><title>Stacks in Elixir</title><link>https://www.samuelwillis.dev/posts/stacks-in-elixir/</link><pubDate>Sun, 11 Apr 2021 15:12:45 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/stacks-in-elixir/</guid><description>Stacks are one of the most basic data structures in Computer Science. Nonetheless, they are quite useful and used often.
They operate under the Last In First Out (LIFO) policy, meaning the last object placed onto the stack is the first one to be removed from it.
In Elixir they are essentially syntactical sugar for Lists but implementing them was a nice way to get acquainted with Structs and basic pattern matching.</description></item><item><title>Hello World</title><link>https://www.samuelwillis.dev/posts/hello-world/</link><pubDate>Sun, 11 Apr 2021 14:34:21 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/hello-world/</guid><description>Welcome to my blog, where I aim to document (re)learning core developer ideas.
Much of it will be done in the functional language Elixir
I hope you find something useful here.</description></item><item><title>About</title><link>https://www.samuelwillis.dev/about/</link><pubDate>Sun, 11 Apr 2021 14:33:59 -0600</pubDate><guid>https://www.samuelwillis.dev/about/</guid><description>Software Developer currently living within the Ktunaxa ?amaki?is, the homeland of the Ktunaxa people.
Currently working with Elixir and loving it.
Avid cyclist.</description></item></channel></rss>