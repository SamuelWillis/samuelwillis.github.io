<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on samuel willis</title><link>https://www.samuelwillis.dev/posts/</link><description>Recent content in Posts on samuel willis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Apr 2021 15:12:45 -0600</lastBuildDate><atom:link href="https://www.samuelwillis.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Stacks in Elixir</title><link>https://www.samuelwillis.dev/posts/stacks-in-elixir/</link><pubDate>Sun, 11 Apr 2021 15:12:45 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/stacks-in-elixir/</guid><description>Stacks are one of the most basic data structures in Computer Science. Nonetheless, they are quite useful and used often.
They operate under the Last In First Out (LIFO) policy, meaning the last object placed onto the stack is the first one to be removed from it.
In Elixir they are essentially syntactical sugar for Lists but implementing them was a nice way to get acquainted with Structs and basic pattern matching.</description><content type="html"><![CDATA[<p>Stacks are one of the most basic data structures in Computer Science.
Nonetheless, they are quite useful and used often.</p>
<p>They operate under the Last In First Out (LIFO) policy, meaning the last object
placed onto the stack is the first one to be removed from it.</p>
<p>In Elixir they are essentially syntactical sugar for
<a href="https://hexdocs.pm/elixir/List.html">Lists</a> but implementing them was a nice
way to get acquainted with <a href="https://elixir-lang.org/getting-started/structs.html">Structs</a>
and basic <a href="https://elixir-lang.org/getting-started/pattern-matching.html">pattern
matching</a>.</p>
<h2 id="operations">Operations</h2>
<p>Formally, the operations for a Stack are <strong>push</strong>, <strong>pop</strong>, <strong>empty</strong>, and <strong>full</strong>.
They typically include checks for <em>overflow errors</em> (pushing to a full stack) and
<em>underflow errors</em> (popping from an empty stack).</p>
<pre><code>Push(S, x)
  if Full(S) throw Overflow Error
  S[++S.top] = x

Pop(S)
  if Empty(S) throw Underflow Error
  return S[--S.top]

Empty(S)
  if count(S) == 0:
    return True
  else
    return False

Full(S)
  if S.top == S.length
    return True
  else
    return False
</code></pre><h2 id="implementation">Implementation</h2>
<p>The Elixir implementation will use a linked list.
This is because we do not have access to a traditional/imperative style arrays in
Elixir.</p>
<p>Linked lists do not have a static size and, as such, they do not require
resizing when too many elements are added to the stack.
Because of this each operation will take constant time in the <strong>worst
case</strong>.
This does come at the cost of more space used to store each item.</p>
<p>A <a href="https://elixir-lang.org/getting-started/structs.html">Struct</a> will be used to
represent a Stack.
A field called <code>elements</code> will be used to store the list of elements.
Each item in the elements list can have any type.</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir"><span class="kd">defmodule</span> <span class="nc">ElixirImpl.DataStructure.Stack</span> <span class="k">do</span>
  <span class="na">@moduledoc</span> <span class="sh">&#34;&#34;&#34;
</span><span class="sh">  Stack implementation.
</span><span class="sh">
</span><span class="sh">  This is essentially sugar for Elixir Lists, but is here to show how basic
</span><span class="sh">  operations should work on a stack.
</span><span class="sh">  &#34;&#34;&#34;</span>
  <span class="kd">defstruct</span> <span class="ss">elements</span><span class="p">:</span> <span class="p">[]</span>

  <span class="na">@typep</span> <span class="n">t</span> <span class="o">::</span> <span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span>
           <span class="ss">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">any</span><span class="p">()]</span>
         <span class="p">}</span>
<span class="k">end</span>
</code></pre></div><h3 id="push">Push</h3>
<p>Lets add the push operation.</p>
<p>Since the elements struct key will always exist the <code>|</code> operator to can be
used to update the elements key in the struct without worrying about an error.</p>
<p>Thus the <code>push</code> operation looks like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="na">@doc</span> <span class="sh">&#34;&#34;&#34;
</span><span class="sh">  Push an item onto a stack.
</span><span class="sh">
</span><span class="sh">  </span><span class="err">##</span><span class="sh"> Examples
</span><span class="sh">    iex&gt; Stack.push(%Stack{elements: []}, &#34;one&#34;)
</span><span class="sh">    %Stack{elements: [&#34;one&#34;]}
</span><span class="sh">
</span><span class="sh">    iex&gt; Stack.push(%Stack{elements: [&#34;one&#34;]}, &#34;two&#34;)
</span><span class="sh">    %Stack{elements: [&#34;two&#34;, &#34;one&#34;]}
</span><span class="sh">  &#34;&#34;&#34;</span>
  <span class="na">@spec</span> <span class="n">push</span><span class="p">(</span><span class="n">__MODULE__</span><span class="o">.</span><span class="n">t</span><span class="p">(),</span> <span class="n">any</span><span class="p">())</span> <span class="o">::</span> <span class="n">__MODULE__</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="kd">def</span> <span class="n">push</span><span class="p">(</span><span class="err">%</span><span class="n">__MODULE__</span><span class="p">{}</span> <span class="o">=</span> <span class="n">stack</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">do</span>
    <span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span>
      <span class="n">stack</span>
      <span class="o">|</span> <span class="ss">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="n">stack</span><span class="o">.</span><span class="n">elements</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="k">end</span>
</code></pre></div><h3 id="pop">Pop</h3>
<p>Next, the <strong>pop</strong> operation.</p>
<p>For the pop, a check for a empty elements list will be needed.</p>
<p>This check is done using pattern matching.
If the Stack&rsquo;s elements matches an empty list, an error tuple is returned with a
reason.</p>
<p>Pattern matching is also used when the elements list is non empty.
In this case, the <code>head</code> and <code>tail</code> of the elements list is matched against.
The Stack then has its elements updated to be the matched <code>tail</code> and a tuple is
returned consisting of a <code>:ok</code> atom, the matched <code>head</code>, and the updated Stack.</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="na">@doc</span> <span class="sh">&#34;&#34;&#34;
</span><span class="sh">  Pop an item off the top of the stack
</span><span class="sh">
</span><span class="sh">  </span><span class="err">##</span><span class="sh"> Examples
</span><span class="sh">    iex&gt; Stack.pop(%Stack{elements: [&#34;item one&#34;]})
</span><span class="sh">    {:ok, &#34;item one&#34;, %Stack{elements: []}}
</span><span class="sh">
</span><span class="sh">    iex&gt; Stack.pop(%Stack{elements: [&#34;item two&#34;, &#34;item one&#34;]})
</span><span class="sh">    {:ok, &#34;item two&#34;, %Stack{elements: [&#34;item one&#34;]}}
</span><span class="sh">
</span><span class="sh">    iex&gt; Stack.pop(%Stack{elements: []})
</span><span class="sh">    {:error, &#34;Empty Stack&#34;}
</span><span class="sh">  &#34;&#34;&#34;</span>
  <span class="na">@spec</span> <span class="n">pop</span><span class="p">(</span><span class="n">__MODULE__</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="o">::</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="nc">String</span><span class="o">.</span><span class="n">t</span><span class="p">()}</span> <span class="o">|</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">any</span><span class="p">(),</span> <span class="n">__MODULE__</span><span class="o">.</span><span class="n">t</span><span class="p">()}</span>
  <span class="kd">def</span> <span class="n">pop</span><span class="p">(</span><span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="ss">elements</span><span class="p">:</span> <span class="p">[]}),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="s2">&#34;Empty Stack&#34;</span><span class="p">}</span>
  <span class="kd">def</span> <span class="n">pop</span><span class="p">(</span><span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="ss">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">top</span> <span class="o">|</span> <span class="n">rest</span><span class="p">]}),</span> <span class="ss">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="ss">elements</span><span class="p">:</span> <span class="n">rest</span><span class="p">}}</span>
</code></pre></div><h3 id="empty">Empty</h3>
<p>The empty operation is quite simple using pattern matching.</p>
<p>If the Stack&rsquo;s elements matches a non empty list, we return <code>false</code>.
Otherwise, return <code>true</code>.
The <a href="https://hexdocs.pm/elixir/master/naming-conventions.html#trailing-question-mark-foo">trailing question
mark</a>
naming convention is used in the implementation.</p>
<div class="highlight"><pre class="chroma"><code class="language-elixir" data-lang="elixir">  <span class="na">@doc</span> <span class="sh">&#34;&#34;&#34;
</span><span class="sh">  Check if stack is empty
</span><span class="sh">
</span><span class="sh">  </span><span class="err">##</span><span class="sh"> Examples
</span><span class="sh">    iex&gt; Stack.empty?(%Stack{elements: [&#34;item one&#34;]})
</span><span class="sh">    false
</span><span class="sh">
</span><span class="sh">    iex&gt; Stack.empty?(%Stack{elements: []})
</span><span class="sh">    true
</span><span class="sh">  &#34;&#34;&#34;</span>
  <span class="kd">def</span> <span class="n">empty?</span><span class="p">(</span><span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="ss">elements</span><span class="p">:</span> <span class="p">[</span><span class="n">_head</span> <span class="o">|</span> <span class="n">_tail</span><span class="p">]}),</span> <span class="ss">do</span><span class="p">:</span> <span class="no">false</span>
  <span class="kd">def</span> <span class="n">empty?</span><span class="p">(</span><span class="err">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="ss">elements</span><span class="p">:</span> <span class="p">[]}),</span> <span class="ss">do</span><span class="p">:</span> <span class="no">true</span>
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Stacks are a rudimentary data structure but they are used constantly in
programming.
They help us allocate memory, parse code, add ways to undo actions, and much
more.</p>
<p>Implementing a Stack in Elixir is really just sugar for built in Elixir lists
but was a nice way to get acquainted with pattern matching and structs.</p>
<p><a href="https://github.com/SamuelWillis/algorithms/blob/main/elixir/lib/data_structures/stack.ex">Click for the full
implementation</a>.</p>
<p><a href="https://github.com/SamuelWillis/algorithms/tree/main/notes/data-structures/stack">And here is my full set of Stack
notes</a>.</p>
]]></content></item><item><title>Hello World</title><link>https://www.samuelwillis.dev/posts/hello-world/</link><pubDate>Sun, 11 Apr 2021 14:34:21 -0600</pubDate><guid>https://www.samuelwillis.dev/posts/hello-world/</guid><description>Welcome to my blog, where I aim to document (re)learning core developer ideas.
Much of it will be done in the functional language Elixir
I hope you find something useful here.</description><content type="html"><![CDATA[<p>Welcome to my blog, where I aim to document (re)learning core developer ideas.</p>
<p>Much of it will be done in the functional language
<a href="https://elixir-lang.org/">Elixir</a></p>
<p>I hope you find something useful here.</p>
]]></content></item></channel></rss>